cmake_minimum_required(VERSION 3.17)
project(openpose)

set(CMAKE_CXX_STANDARD 11)

message("HELLO HELLO WORLD!")

### CMAKE_BUILD_TYPE
# Default: Release
set(CMAKE_BUILD_TYPE_KNOWN FALSE)
if (${CMAKE_BUILD_TYPE} MATCHES "Debug")
    set(CMAKE_BUILD_TYPE_KNOWN TRUE)
endif (${CMAKE_BUILD_TYPE} MATCHES "Debug")
if (${CMAKE_BUILD_TYPE} MATCHES "MinSizeRel")
    set(CMAKE_BUILD_TYPE_KNOWN TRUE)
endif (${CMAKE_BUILD_TYPE} MATCHES "MinSizeRel")
if (${CMAKE_BUILD_TYPE} MATCHES "RelWithDebInfo")
    set(CMAKE_BUILD_TYPE_KNOWN TRUE)
endif (${CMAKE_BUILD_TYPE} MATCHES "RelWithDebInfo")
# Assign proper CMAKE_BUILD_TYPE
if (${CMAKE_BUILD_TYPE_KNOWN})
    set(CMAKE_BUILD_TYPE "Release" CACHE STRING "Choose the type of build.")
else (${CMAKE_BUILD_TYPE_KNOWN})
    set(CMAKE_BUILD_TYPE "Release" CACHE STRING "Choose the type of build." FORCE)
endif (${CMAKE_BUILD_TYPE_KNOWN})
set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Release" "Debug" "MinSizeRel" "RelWithDebInfo")


### FLAGS
if (UNIX)
    # Turn on C++11
    add_definitions(-std=c++11)
    set(CMAKE_CXX_FLAGS_RELEASE "-O3")
elseif (APPLE)
    # Turn on C++11
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
    set(CMAKE_CXX_FLAGS_RELEASE "-O3")
endif (UNIX)

# C++ additional flags
if (CMAKE_COMPILER_IS_GNUCXX)
    message(STATUS "GCC detected, adding compile flags")
    # set(OP_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fopenmp -Wpedantic -Wall -Wextra -Wfatal-errors")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fopenmp")
    set(OP_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wpedantic -Wall -Wextra -Wfatal-errors")
    # set(CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS} -Wpedantic -Wall -Wextra -Wfatal-errors")
endif (CMAKE_COMPILER_IS_GNUCXX)

# Select the Enhanced Instruction Set
set(INSTRUCTION_SET NONE CACHE STRING "Enable Enhanced Instruction Set")
set_property(CACHE INSTRUCTION_SET PROPERTY STRINGS NONE AVX2)
if (${INSTRUCTION_SET} MATCHES "AVX2")
    add_definitions("-DWITH_AVX")
endif (${INSTRUCTION_SET} MATCHES "AVX2")

if (${INSTRUCTION_SET} MATCHES "AVX2")
    set(SIMD_FLAGS "${SIMD_FLAGS} -mavx -march=native")
endif (${INSTRUCTION_SET} MATCHES "AVX2")
message(STATUS "GCC detected, adding compile flags")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${SIMD_FLAGS}")

### PROJECT OPTIONS
# Select the DL Framework
set(DL_FRAMEWORK CAFFE CACHE STRING "Select Deep Learning Framework.")
set_property(CACHE DL_FRAMEWORK PROPERTY STRINGS CAFFE NV_CAFFE)

# Suboptions for Caffe DL Framework
include(CMakeDependentOption)
if (${DL_FRAMEWORK} MATCHES "CAFFE" OR ${DL_FRAMEWORK} MATCHES "NV_CAFFE")
    CMAKE_DEPENDENT_OPTION(BUILD_CAFFE "Build Caffe as part of OpenPose." ON "DL_FRAMEWORK" ON)
    # OpenPose flags
    add_definitions(-DUSE_CAFFE)
    # Nvidia NVCaffe
    if (${DL_FRAMEWORK} MATCHES "NV_CAFFE")
        MESSAGE(STATUS "Using NVIDIA NVCaffe")
        add_definitions(-DNV_CAFFE)
    endif (${DL_FRAMEWORK} MATCHES "NV_CAFFE")
endif (${DL_FRAMEWORK} MATCHES "CAFFE" OR ${DL_FRAMEWORK} MATCHES "NV_CAFFE")

# Set the acceleration library
if (APPLE)
    set(GPU_MODE CPU_ONLY CACHE STRING "Select the acceleration GPU library or CPU otherwise.")
else (APPLE)
    set(GPU_MODE CUDA CACHE STRING "Select the acceleration GPU library or CPU otherwise.")
endif (APPLE)
set_property(CACHE GPU_MODE PROPERTY STRINGS CUDA OPENCL CPU_ONLY)

# Look for CUDA
set(CUDA_FOUND FALSE)
if (${GPU_MODE} MATCHES "CUDA")
    find_package(CUDA)
endif (${GPU_MODE} MATCHES "CUDA")

# OpenPose flags
add_definitions(-DUSE_CUDA)
message(STATUS "Building with CUDA.")

# Suboptions for GPU architectures
if (${GPU_MODE} MATCHES "CUDA")
    set(CUDA_ARCH Auto CACHE STRING "Select target NVIDIA GPU achitecture.")
    set_property(CACHE CUDA_ARCH PROPERTY STRINGS Auto All Manual)
endif (${GPU_MODE} MATCHES "CUDA")

# Suboptions for acceleration library
if (${GPU_MODE} MATCHES "CUDA")
    option(USE_CUDNN "Build OpenPose with cuDNN library support." ON)
endif (${GPU_MODE} MATCHES "CUDA")

set(WITH_EIGEN NONE CACHE STRING "Select the Eigen mode: NONE if not required, BUILD to let OpenPose download it, or FIND to let CMake find it (e.g., if you installed it manually or used `sudo apt-get install libeigen3-dev`).")
set_property(CACHE WITH_EIGEN PROPERTY STRINGS NONE BUILD FIND)

# Download the models
option(DOWNLOAD_BODY_25_MODEL "Download body 25-keypoint (body COCO and 6-keypoint foot) model." ON)
option(DOWNLOAD_BODY_COCO_MODEL "Download body 18-keypoint COCO model." OFF)
option(DOWNLOAD_BODY_MPI_MODEL "Download body 15-keypoint MPI model." OFF)
option(DOWNLOAD_FACE_MODEL "Download face model." ON)
option(DOWNLOAD_HAND_MODEL "Download hand model." ON)

option(BUILD_EXAMPLES "Build OpenPose examples." ON)
option(BUILD_SHARED_LIBS "Build as shared lib." ON)

# Threads - Pthread
if (${GPU_MODE} MATCHES "OPENCL" OR (UNIX OR APPLE))
    unset(CMAKE_THREAD_LIBS_INIT CACHE)
    find_package(Threads)
endif (${GPU_MODE} MATCHES "OPENCL" OR (UNIX OR APPLE))

### FIND REQUIRED PACKAGES
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules")

if (${GPU_MODE} MATCHES "CUDA")
    find_package(CUDA)
endif (${GPU_MODE} MATCHES "CUDA")

if (CUDA_VERSION_STRING STRGREATER "9.0")
    find_package(Eigen3 3.3.5 REQUIRED NO_MODULE)
else (CUDA_VERSION_STRING STRGREATER "9.0")
    find_package(Eigen3 3 REQUIRED NO_MODULE)
endif (CUDA_VERSION_STRING STRGREATER "9.0")

if (UNIX OR APPLE)
    if (${GPU_MODE} MATCHES "CUDA")
        include(cmake/Cuda.cmake)
        find_package(CuDNN)
    endif (${GPU_MODE} MATCHES "CUDA")
    find_package(GFlags) # For Caffe and OpenPose
    find_package(Glog) # For Caffe
    find_package(Protobuf REQUIRED) # For Caffe

    if (OpenCV_CONFIG_FILE)
        include (${OpenCV_CONFIG_FILE})
        # Allow explicitly setting the OpenCV includes and libs
    elseif (OpenCV_INCLUDE_DIRS AND OpenCV_LIBS)
        set(OpenCV_FOUND 1)
    elseif (OpenCV_INCLUDE_DIRS AND OpenCV_LIBS_DIR)
        file(GLOB_RECURSE OpenCV_LIBS "${OpenCV_LIBS_DIR}*.so")
        set(OpenCV_FOUND 1)
    else (OpenCV_CONFIG_FILE)
        find_package(OpenCV)
    endif (OpenCV_CONFIG_FILE)

    if (${GPU_MODE} MATCHES "CUDA")
        # Set CUDA Flags
        set(CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS} -std=c++11")
        set(CUDA_NVCC_FLAGS_DEBUG "${CUDA_NVCC_FLAGS_DEBUG} -D_DEBUG -g")
    endif (${GPU_MODE} MATCHES "CUDA")
endif (UNIX OR APPLE)

SET(Caffe_INCLUDE_DIRS "/usr/local/src/openpose/build/caffe/include")
SET(Caffe_LIBS "/usr/local/src/openpose/build/caffe/lib/libcaffe.so.1.0.0")
message("HELLO WORLD!")
message("${BUILD_CAFFE}")
if (Caffe_INCLUDE_DIRS AND Caffe_LIBS AND NOT BUILD_CAFFE)
    message("HELLO WORLD!")
endif()


### CAFFE/NVCAFFE in Ubuntu
if (UNIX OR APPLE)
    if (${DL_FRAMEWORK} MATCHES "CAFFE" OR ${DL_FRAMEWORK} MATCHES "NV_CAFFE")
        # Check if the user specified caffe paths
        if (Caffe_INCLUDE_DIRS AND Caffe_LIBS AND NOT BUILD_CAFFE)
            message(STATUS "\${Caffe_INCLUDE_DIRS} set by the user to " ${Caffe_INCLUDE_DIRS})
            message(STATUS "\${Caffe_LIBS} set by the user to " ${Caffe_LIBS})
            set(Caffe_FOUND 1)
        endif (Caffe_INCLUDE_DIRS AND Caffe_LIBS AND NOT BUILD_CAFFE)

        # Else build from scratch
        if (BUILD_CAFFE)

            # Download Caffe
            message(STATUS "Caffe will be downloaded from source now. NOTE: This process might take several minutes depending
        on your internet connection.")

            # Check if pulled
            file(GLOB CAFFE_DIR_VALID ${CMAKE_SOURCE_DIR}/3rdparty/caffe/*)
            list(LENGTH CAFFE_DIR_VALID CAFFE_DIR_VALID_LENGTH)
            if (CAFFE_DIR_VALID_LENGTH EQUAL 0)
                execute_process(COMMAND git submodule update --init ${CMAKE_SOURCE_DIR}/3rdparty/caffe)
                # execute_process(COMMAND git submodule update --init --recursive --remote) # This would initialize them all
            else (CAFFE_DIR_VALID_LENGTH EQUAL 0)
                message(STATUS "Caffe has already been downloaded.")
            endif (CAFFE_DIR_VALID_LENGTH EQUAL 0)

            # Build Process
            set(CAFFE_CPU_ONLY OFF)
            if (${GPU_MODE} MATCHES "CUDA")
                # execute_process(COMMAND git checkout master WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/3rdparty/caffe)
                execute_process(COMMAND git checkout c95002f WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/3rdparty/caffe)
            elseif (${GPU_MODE} MATCHES "CPU_ONLY")
                if (USE_MKL)
                    #execute_process(COMMAND git checkout intel WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/3rdparty/caffe)
                    execute_process(COMMAND git checkout b6712ce WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/3rdparty/caffe)
                    execute_process(COMMAND sh prepare_mkl.sh WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/3rdparty/caffe/external/mkl
                            OUTPUT_VARIABLE rv)
                    set( MLIST ${rv} )
                    separate_arguments(MLIST)
                    list(GET MLIST 0 MKL_PATH)
                    message(STATUS ${MKL_PATH})
                    file(GLOB MKL_SO
                            "${MKL_PATH}lib/*"
                            )
                    file(COPY ${MKL_SO} DESTINATION ${CMAKE_BINARY_DIR}/caffe)

                    # New MLSL Lib
                    #execute_process(COMMAND sh prepare_mlsl.sh WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/3rdparty/caffe/external/mlsl
                    #    OUTPUT_VARIABLE rv)
                    #set( MLIST ${rv} )
                    #separate_arguments(MLIST)
                    #list(GET MLIST 0 MLSL_PATH)
                    #message(STATUS ${MLSL_PATH})
                    #file(GLOB MLSL_SO
                    #  "${MLSL_PATH}/intel64/lib/*"
                    #  )
                    #file(COPY ${MLSL_SO} DESTINATION ${CMAKE_BINARY_DIR}/caffe)

                    set(MKL_LIBS
                            #"${CMAKE_BINARY_DIR}/caffe/libmlsl.so"
                            "${CMAKE_BINARY_DIR}/caffe/libiomp5.so"
                            "${CMAKE_BINARY_DIR}/caffe/libmklml_intel.so"
                            "${CMAKE_BINARY_DIR}/caffe/lib/libmkldnn.so"
                            )
                else (USE_MKL)
                    # execute_process(COMMAND git checkout master WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/3rdparty/caffe)
                    execute_process(COMMAND git checkout c95002f WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/3rdparty/caffe)
                endif (USE_MKL)
                set(CAFFE_CPU_ONLY ON)
                set(USE_CUDNN OFF)
            elseif (${GPU_MODE} MATCHES "OPENCL")
                execute_process(COMMAND git checkout fe2a1102 WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/3rdparty/caffe)
                set(USE_CUDNN OFF)
            endif (${GPU_MODE} MATCHES "CUDA")

            # Build Caffe
            message(STATUS "Caffe will be built from source now.")
            find_package(Caffe)
            include(ExternalProject)
            set(CAFFE_PREFIX caffe)
            set(CAFFE_URL ${CMAKE_SOURCE_DIR}/3rdparty/caffe)

            # One for Intel Branch and one for Master
            if (USE_MKL)
                ExternalProject_Add(openpose_lib
                        SOURCE_DIR ${CAFFE_URL}
                        PREFIX ${CAFFE_PREFIX}
                        CMAKE_ARGS -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
                        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
                        -DMKLDNN_INSTALL_DIR:PATH=<INSTALL_DIR>
                        -DUSE_MKL2017_AS_DEFAULT_ENGINE=${CAFFE_CPU_ONLY}
                        -DUSE_CUDNN=${USE_CUDNN}
                        -DCUDA_ARCH_NAME=${CUDA_ARCH}
                        -DCUDA_ARCH_BIN=${CUDA_ARCH_BIN}
                        -DCUDA_ARCH_PTX=${CUDA_ARCH_PTX}
                        -DCPU_ONLY=${CAFFE_CPU_ONLY}
                        -DCMAKE_BUILD_TYPE=Release
                        -DBUILD_docs=OFF
                        -DBUILD_python=OFF
                        -DBUILD_python_layer=OFF
                        -DUSE_LEVELDB=OFF
                        -DUSE_LMDB=OFF
                        -DUSE_OPENCV=OFF)
                # -DOpenCV_DIR=${OpenCV_DIR})
            else (USE_MKL)
                ExternalProject_Add(openpose_lib
                        SOURCE_DIR ${CAFFE_URL}
                        PREFIX ${CAFFE_PREFIX}
                        CMAKE_ARGS -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
                        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
                        -DUSE_CUDNN=${USE_CUDNN}
                        -DCUDA_ARCH_NAME=${CUDA_ARCH}
                        -DCUDA_ARCH_BIN=${CUDA_ARCH_BIN}
                        -DCUDA_ARCH_PTX=${CUDA_ARCH_PTX}
                        -DCPU_ONLY=${CAFFE_CPU_ONLY}
                        -DCMAKE_BUILD_TYPE=Release
                        -DBUILD_docs=OFF
                        -DBUILD_python=OFF
                        -DBUILD_python_layer=OFF
                        -DUSE_LEVELDB=OFF
                        -DUSE_LMDB=OFF
                        -DUSE_OPENCV=OFF)
                # -DOpenCV_DIR=${OpenCV_DIR})
            endif (USE_MKL)

            ExternalProject_Get_Property(openpose_lib install_dir)

            if (NOT Caffe_FOUND)
                add_custom_command(TARGET openpose_lib
                        POST_BUILD
                        COMMAND ${CMAKE_COMMAND} ${CMAKE_SOURCE_DIR}
                        COMMAND $(MAKE)
                        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
                        COMMENT "Rerunning cmake after building Caffe submodule")
            endif (NOT Caffe_FOUND)

        endif (BUILD_CAFFE)

        if (NOT Caffe_FOUND AND NOT BUILD_CAFFE)
            message(FATAL_ERROR "Caffe not found. Either turn on the BUILD_CAFFE option or specify the path of Caffe includes
        and libs using -DCaffe_INCLUDE_DIRS and -DCaffe_LIBS.")
        endif (NOT Caffe_FOUND AND NOT BUILD_CAFFE)
    endif (${DL_FRAMEWORK} MATCHES "CAFFE" OR ${DL_FRAMEWORK} MATCHES "NV_CAFFE")
endif (UNIX OR APPLE)

### PROJECT INCLUDES
# Specify the include directories
include_directories(include ${Protobuf_INCLUDE_DIRS} ${GFLAGS_INCLUDE_DIR} ${GLOG_INCLUDE_DIR} ${OpenCV_INCLUDE_DIRS})

# Calibration
include_directories(${EIGEN3_INCLUDE_DIRS})
set(OpenPose_3rdparty_libraries ${OpenPose_3rdparty_libraries} Eigen3::Eigen)

include_directories(${Caffe_INCLUDE_DIRS})

if (${GPU_MODE} MATCHES "CUDA")
    include_directories(${CUDA_INCLUDE_DIRS})
endif (${GPU_MODE} MATCHES "CUDA")

### COLLECT ALL 3RD-PARTY LIBRARIES TO BE LINKED AGAINST
if (UNIX OR APPLE)
    set(OpenPose_3rdparty_libraries ${OpenPose_3rdparty_libraries} ${OpenCV_LIBS} ${GLOG_LIBRARY})
endif (UNIX OR APPLE)
# G Flags (for demos)
if (UNIX OR APPLE)
    set(examples_3rdparty_libraries ${OpenPose_3rdparty_libraries} ${GFLAGS_LIBRARY})
endif (UNIX OR APPLE)
# Deep net Framework
if (${DL_FRAMEWORK} MATCHES "CAFFE" OR ${DL_FRAMEWORK} MATCHES "NV_CAFFE")
    if (UNIX OR APPLE)
        message("Add caffe library!")
        set(OpenPose_3rdparty_libraries ${OpenPose_3rdparty_libraries} ${Caffe_LIBS})
    endif (UNIX OR APPLE)
endif (${DL_FRAMEWORK} MATCHES "CAFFE" OR ${DL_FRAMEWORK} MATCHES "NV_CAFFE")

# Pthread
if (UNIX OR APPLE)
    set(OpenPose_3rdparty_libraries ${OpenPose_3rdparty_libraries} pthread)
endif (UNIX OR APPLE)

message("OpenPose_3rdparty_libraries = ${OpenPose_3rdparty_libraries}")
















find_package(OpenPose REQUIRED)
if (OpenPose_FOUND)
    message("OpenPose includes ${OpenPose_INCLUDE_DIRS}")
    message("OpenPose libs: ${OpenPose_LIBS}")
endif ()

find_package(GFlags REQUIRED)
message(${GFLAGS_INCLUDE_DIR})
message(${GFLAGS_LIBRARIES})

find_package(Threads)  # <- pthread

include_directories(${OpenPose_INCLUDE_DIRS} ${GFLAGS_INCLUDE_DIR})
add_executable(RealsenseOpenpose examples/user_code/main.cpp)
target_link_libraries(RealsenseOpenpose
        openpose  # === ${OpenPose_LIBS}
        ${GFLAGS_LIBRARIES}
        ${OpenPose_3rdparty_libraries}
        pthread
        )
